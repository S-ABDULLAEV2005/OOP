package problem4;

class Manager extends Employee implements Comparable<Manager> {
    private Vector<Employee> team;
    private double bonus;

    // Constructors, getters, setters, etc.

    @Override
    public String toString() {
        return "Manager [name=" + getName() +
               ", annualSalary=" + getAnnualSalary() +
               ", hireDate=" + getHireDate() +
               ", nationalInsuranceNumber=" + getNationalInsuranceNumber() +
               ", bonus=" + bonus +
               ", team=" + team + "]";
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null || getClass() != obj.getClass())
            return false;
        if (!super.equals(obj))
            return false;
        Manager manager = (Manager) obj;
        return Double.compare(manager.bonus, bonus) == 0 &&
               team.equals(manager.team);
    }

    @Override
    public int compareTo(Manager other) {
        // Compare by salary, then by bonus
        int salaryComparison = Double.compare(this.getAnnualSalary(), other.getAnnualSalary());
        if (salaryComparison != 0) {
            return salaryComparison;
        } else {
            return Double.compare(this.bonus, other.bonus);
        }
    }

    // Clone method - you can choose between shallow and deep cloning
    @Override
    public Object clone() {
        try {
            Manager clone = (Manager) super.clone();
            // If Date or other mutable objects are part of the class, consider deep cloning here.
            clone.team = (Vector<Employee>) this.team.clone();
            return clone;
        } catch (CloneNotSupportedException e) {
            throw new InternalError(e);
        }
    }
}
